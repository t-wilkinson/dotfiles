" Plug
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
call plug#begin('~/.vim/plugged')
filetype off
" disabled
    " Plug 'sbdchd/neoformat'
    " Plug 'luochen1990/rainbow'
    "     let g:rainbow_active = 0
    "     let g:rainbow_conf = { 'guifgs': ['#8be9fd', '#ff79c6', '#bd93f9', '#50fa7b', '#f1fa8c', '#8be9fd'] }
    " Plug 'Yggdroot/indentLine'
    "     let g:indentLine_char_list = [''] " ['Â¦'] Â¦â”Š
    "     let g:indentLine_enabled = 1
    "     let g:indentLine_concealcursor = 'n'
    "     let g:indentLine_conceallevel = 2
    " Plug 'vim-pandoc/vim-pandoc'
    " Plug 'vim-pandoc/vim-pandoc-syntax'
    " Plug 'lervag/vimtex'
    " Plug 'styled-components/vim-styled-components', {'branch': 'main'}

" tpope
    Plug 'tpope/vim-fugitive'   " Yeh
    Plug 'tpope/vim-abolish'    " Case matching substitute and others
    Plug 'tpope/vim-repeat'     " Repeat plugin commands
    Plug 'tpope/vim-surround'   " Surround Vim
    Plug 'tpope/vim-commentary' " Comment lines
    Plug 'tpope/vim-obsession'   " Save sessions

Plug 'Jparise/vim-graphql'
Plug 'arecarn/vim-fold-cycle'
Plug 'machakann/vim-swap'
Plug 'rafi/awesome-vim-colorschemes'
Plug 'christoomey/vim-tmux-navigator' " Seamless tmux navigation
Plug 'sheerun/vim-polyglot'           " The best syntax highlighting
Plug 'dracula/vim'
Plug 'moll/vim-bbye' " optional dependency for vim-symlink
Plug 'aymericbeaumet/vim-symlink'
Plug 'neoclide/coc.nvim', {'branch': 'release'}
    " TextEdit might fail if hidden is not set.
    set hidden
    " Some servers have issues with backup files, see #649.
    set nobackup
    set nowritebackup

    " Give more space for displaying messages.
    set cmdheight=2

    " Having longer updatetime (default is 4000 ms = 4 s) leads to noticeable
    " delays and poor user experience.
    set updatetime=200

    " Don't pass messages to |ins-completion-menu|.
    set shortmess+=c

    " Always show the signcolumn, otherwise it would shift the text each time
    " diagnostics appear/become resolved.
    if has("patch-8.1.1564")
      " Recently vim can merge signcolumn and number column into one
      set signcolumn=number
    else
      set signcolumn=yes
    endif

    " Use `[g` and `]g` to navigate diagnostics
    " Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.
    nmap <silent> [g <Plug>(coc-diagnostic-prev)
    nmap <silent> ]g <Plug>(coc-diagnostic-next)

    " GoTo code navigation.
    nmap <silent> gd <Plug>(coc-definition)
    nmap <silent> gy <Plug>(coc-type-definition)
    nmap <silent> gi <Plug>(coc-implementation)
    nmap <silent> gr <Plug>(coc-references)

    nmap <silent> <leader>cs :ToggleSigncolumn<CR>
    command! ToggleSigncolumn :let &signcolumn=(&signcolumn == "auto" ? "no" : "auto")

    autocmd CursorHold * silent call CocActionAsync('highlight')

    command! -nargs=0 Prettier :CocCommand prettier.formatFile
    nnoremap <silent> K :call CocAction('doHover')<CR>

    nmap <leader>co <Plug>(coc-codeaction)

Plug 'mattn/emmet-vim'
    let g:user_emmet_leader_key='<C-Y>'
    let g:user_emmet_mode='i'
    " let g:user_emmet_install_global = 0
    " autocmd FileType html,css EmmetInstall

Plug 'junegunn/vim-easy-align'
    xmap ga <Plug>(EasyAlign)
    nmap ga <Plug>(EasyAlign)

Plug 'neovimhaskell/haskell-vim'          " Better haskell highlighting. Haskell gets special attention because it's the best
    " syntax settings
    let g:haskell_enable_quantification = 1   " forall
    let g:haskell_enable_recursivedo = 1      " mdo and rec
    let g:haskell_enable_arrowsyntax = 1      " proc
    let g:haskell_enable_pattern_synonyms = 1 " pattern
    let g:haskell_enable_typeroles = 1        " type roles
    let g:haskell_enable_static_pointers = 1  " static
    let g:haskell_backpack = 1                " to enable highlighting of backpack keywords
    let g:haskell_classic_highlighting = 1    " non-opinionated highlighting
    " indent settings
    let g:haskell_indent_before_where = -2
    let g:haskell_indent_after_bare_where = 2
    let g:haskell_indent_if = 3
    let g:haskell_indent_case = 4
    let g:haskell_indent_let = 4
    let g:haskell_indent_where = 6
    let g:haskell_indent_do = 3
    let g:haskell_indent_in = 0
    let g:haskell_indent_guard = 2

Plug 'SirVer/ultisnips'
    let g:UltiSnipsExpandTrigger='<Tab>'
    let g:UltiSnipsJumpForwardTrigger='<Tab>'
    let g:UltiSnipsJumpBackwardTrigger='<S-Tab>'
    let g:UltiSnipsSnippetDirectories=[$HOME . '/.vim/UltiSnips']
    let g:UltiSnipsEditSplit="vertical"

Plug 'junegunn/fzf.vim'
    " CTRL-T(tab) / CTRL-X(split) / CTRL-V(ver-split)
    " let $FZF_DEFAULT_COMMAND =  "find * -path '*/\.*' -prune -o -path 'node_modules/**' -prune -o -path 'target/**' -prune -o -path 'dist/**' -prune -o  -type f -print -o -type l -print 2> /dev/null"
    let $FZF_DEFAULT_COMMAND =  "fd . --type f -E node_modules"
    let $FZF_DEFAULT_OPTS=' --cycle --color=dark --color=fg:15,bg:-1,hl:1,fg+:#ffffff,bg+:-1,hl+:1 --color=info:12,prompt:0,pointer:12,marker:4,spinner:11,header:-1 --layout=reverse  --margin=1,4 --preview-window=":60%" --bind ctrl-k:preview-up,ctrl-j:preview-down'
    let g:fzf_layout = { 'window': 'call FloatingFZF()' }
    let g:fzf_command_prefix = "Fzf"

    " https://github.com/junegunn/fzf.vim#advanced-customization
    command! -bang -nargs=* FzfRg
      \ call fzf#vim#grep(
      \   'rg --column --line-number --no-heading --color=always --smart-case -g !node_modules -- '.shellescape(<q-args>), 1,
      \   fzf#vim#with_preview(), <bang>0)

    " https://www.reddit.com/r/neovim/comments/djmehv/im_probably_really_late_to_the_party_but_fzf_in_a/
    function! FloatingFZF()
      let buf = nvim_create_buf(v:false, v:true)
      call setbufvar(buf, '&signcolumn', 'no')

      let height = float2nr(25)
      let width = float2nr(&columns - 8)
      let horizontal = float2nr((&columns - width) / 2)
      let vertical = 1

      let opts = {
            \ 'relative': 'editor',
            \ 'row': vertical,
            \ 'col': horizontal,
            \ 'width': width,
            \ 'height': height,
            \ 'style': 'minimal'
            \ }

      call nvim_open_win(buf, v:true, opts)
    endfunction

Plug 'pseewald/vim-anyfold'
    let g:anyfold_fold_comments=1
    let g:anyfold_fold_size_str='%s'
    let g:anyfold_fold_level_str=''
    " activate anyfold by default
        augroup anyfold
            autocmd!
            autocmd Filetype <filetype> AnyFoldActivate
        augroup END
    " disable anyfold for large files
        let g:LargeFile = 1000000 " file is large if size greater than 1MB
        autocmd BufReadPre,BufRead * let f=getfsize(expand("<afile>")) | if f > g:LargeFile || f == -2 | call LargeFile() | endif
        function LargeFile()
            augroup anyfold
                autocmd! " remove AnyFoldActivate
                autocmd Filetype <filetype> setlocal foldmethod=indent " fall back to indent folding
            augroup END
        endfunction

Plug 'itchyny/lightline.vim'
    set noshowmode
    function! LightLineFilename()
        return fnamemodify(expand("%"), ":~:.")
    endfunction
	function! LightlineFugitive()
        let branch = fugitive#head()
        return branch !=# '' ? "\uf126 ".branch : ''
	endfunction
    function! LightlineObsession()
        let status = ObsessionStatus("\u25cf", "\u25cb")
        return status == '' ? "\u25cb" : status
    endfunction
    let g:lightline = {
                \ 'separator': { 'left': "\ue0b0", 'right': "\ue0b2" },
                \ 'subseparator': { 'left': "\ue0b1", 'right': "\ue0b3" },
                \ 'colorscheme': 'dracula',
                \ 'component_function': {
                \   'gitbranch': 'LightlineFugitive',
                \   'filename': 'LightLineFilename',
                \   'obsession': 'LightlineObsession'
                \ },
                \ 'active': {
                \   'left': [ [ 'mode' ], ['filename', 'modified' ] ],
                \   'right': [ [ 'gitbranch', 'obsession', 'readonly', 'lineinfo' ] ]
                \ },
                \ 'inactive': {
                \   'left': [ ['filename', 'modified' ] ],
                \   'right': [ [] ]
                \ },
                \ }

Plug 't-wilkinson/vim-zettelkasten'
    let g:z_main_dir = $HOME . '/notes'
    let g:z_window_command = 'call FloatingFZF()'
    map <silent> <leader>j :Zettel<CR>
    vmap <silent> <leader>j :ZettelVisual<CR>
Plug 't-wilkinson/vim-mdnav'
    let g:mdnav#Extensions = '.md'

call plug#end()

filetype plugin indent on

"-------------------- Mappings --------------------
" Basic
    map <Space> <leader>
    map Q @@
    map Y y$
    map <silent> <leader>s :keeppatterns source $HOME/.vimrc<CR>
    map <silent> <leader>S :source %<CR>
    nmap <leader>yq gg0vG$"+y:q!<CR>
    map <silent> <leader>p 0Yi["](/home/trey/reading/A)0wwvi[:s/\%V-/ /e0f]dF.0:s/\%V by / - /ej0
    noremap zi zizz

" Fzf
    map <leader>b :FzfBuffers<CR>
    " map <leader>c :FzfColors<CR>
    map <leader>f :FzfFiles<CR>
    map <leader>h :FzfHistory<CR>
    map <leader>l :FzfLines<CR>
    map <leader>r :FzfRg<CR>

" Commands
    " com! Bdelete bp | sp | bn | bd  " delete a buffer but keep window format
    com! RM silent execute "!sudo rm %" | bp | sp | bn | bd!
    func! MVFunc(to)
        silent execute "!mv %" a:to
        Bdelete
        execute "edit" a:to
    endfunc
    com! -complete=file -nargs=1 MV call MVFunc(<q-args>)
    com! W silent execute "write" "!sudo tee % >/dev/null" | silent edit!
    com! ClearReg for i in range(34,122) | silent! call setreg(nr2char(i),"") | endfor
    com! ReactStyle norm 0f"cl{{A€kb;}}0:s/\€kb\(.\)€kb{-}\):\(.\{0€kb-\}€kb€kb}\);/\1: "\2", :s/-\(\w\)/\u\1O// @ts-ignore
    com! PDF norm 0Yi["](/home/trey/reading/A)0wwvi[:s/\%V-/ 0f]dF.0:s/\%V by / - /ej0

"-------------------- Default settings --------------------
" set
    set clipboard=unnamedplus           " Sync clipboard
    set completeopt=menu,preview        " popupmenu, longest common text
    set cmdheight=1                     " 2 to Avoid hit-enter prompt
    set encoding=utf-8
    set expandtab                       " Expand tab to spaces
    set fileformat=unix
    set fillchars=vert:\ "              " Don't like splits
    set gdefault
    set hidden                          " Switch buffers without saving
    set ignorecase smartcase            " Smartcase
    set inccommand=split                " Live search
    set lazyredraw                      " Don't redraw screen after each key in macro
    set linebreak
    set nohlsearch                      " Disable hlsearch
    set nowrap
    set path=**
    set smartindent                     " Smartindent
    set splitbelow splitright           " Better splits
    set termguicolors                   " Use full range of colors
    set undofile undodir=~/.vim/undodir " Undo file
    set wildignore=*/node_modules/*,*.swp,*/__pycache__/*,*/.git/*,*/dist-newstyle/*,*/cljs-runtime/*,*.o,*.hi
    set wildmenu
    set nostartofline
    set norelativenumber nonumber
    set shada=!,'50,<50,s10,h,%
    set autoread
    set pumheight=10
    set concealcursor=n
    set foldlevel=0
    set nocursorline
    set nomodeline

" let
    let &grepprg='grep -n -R --exclude=' . shellescape(&wildignore) . ' $*'
    let g:netrw_banner=0                " hide netrwbanner
    let g:loaded_python_provider = 0    " disable python2
    let g:netrw_liststyle=3             " hide netrwbanner

digraphs xS 739 yS 696 zS 7611 xs 8339 >- 10522 -< 10521 -( 10523 )- 10524 ]- 8866 as 8336 AD 8867 oS 7506 pS 7510 xx 10008

"-------------------- Auto Commands --------------------
func! TrimWhitespace()
    let l:save = winsaveview()
    keeppatterns %s/\s\+$//e
    call winrestview(l:save)
endfunc

au BufWritePre * :silent :call TrimWhitespace()
augroup filetypes
    au!
    au BufRead,BufNewFile * setlocal tabstop=4 softtabstop=4 shiftwidth=4
    au VimEnter,BufRead,BufNewFile * setlocal formatoptions -=cro
    au VimEnter,BufRead,BufNewFile *.sh,.xinitrc,.aliases set syntax=sh.vim
    au VimEnter,BufRead,BufNewFile *.yml,*.css,*.yaml,*.nix,*.ts,*.tsx,*.json,*.js,*.jsx,*.clj,*.cljs,*.cljc setlocal ts=2 sts=2 sw=2
    au VimEnter,BufRead,BufNewFile *.md set nowrap
augroup END
autocmd Filetype * AnyFoldActivate

"-------------------- Colorschemes --------------------
colorscheme dracula
set conceallevel=2
hi Normal guibg=NONE
hi Conceal guibg=NONE
execute 'hi SignColumn guibg='.g:dracula#palette.bgdark[0]
execute 'hi CocErrorSign guifg='. g:dracula#palette.red[0] .' guibg='.g:dracula#palette.bgdark[0]
execute 'hi CocWarningSign guifg='. g:dracula#palette.orange[0] .' guibg='.g:dracula#palette.bgdark[0]
execute 'hi CocInfoSign guifg='. g:dracula#palette.yellow[0] .' guibg='.g:dracula#palette.bgdark[0]
